# --- 1. ServiceAccount for Homepage to talk to the API Server ---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: homepage
  namespace: default
---
# --- 2. The ConfigMap containing all your dashboard settings ---
apiVersion: v1
kind: ConfigMap
metadata:
  name: homepage-config # This name is referenced by the Deployment below
  namespace: default
data:
  settings.yaml: |
    title: Homelab Dashboard
    debug: true  # Enable debugging
    providers:
      kubernetes:
        inCluster: true

  services.yaml: |
    - "Cluster Tools":
        - "Kubernetes Dashboard":
            href: https://dashboard.k8s.local
            icon: kubernetes-dashboard.png
            description: Cluster management UI

    - "Monitoring":
        - "Grafana":
            href: http://grafana.k8s.local
            icon: grafana.png
            description: Metrics and dashboards
        - "Prometheus":
            href: http://prometheus.k8s.local
            icon: prometheus.png
            description: Time-series database

    - "Media":
        - "Plex":
            href: http://192.168.1.221:32400/web
            icon: plex.png
            description: Media Server

  # --- Simplified Widgets ---
  widgets.yaml: |
    - search:
        provider: duckduckgo
        target: _blank
    - kubernetes:
        # No configuration here, using kubernetes.yaml

  bookmarks.yaml: |
    - Developer:
        - Github:
            - abbr: GH
              href: https://github.com/quazmoz
    - Profiles:
        - LinkedIn:
            - abbr: LI
              href: https://www.linkedin.com/in/quinnfavo/
        - QuinnFavo:
            - abbr: DevOps
              href: https://profile.quinnfavo.com/
  docker.yaml: ""
  kubernetes.yaml: |
    # Kubernetes widget configuration
    mode: cluster
    
    # Define the cluster section properly
    cluster:
      show: true
      cpu: true
      memory: true
      showLabel: true
      label: "Cluster"
    
    # Define the nodes section properly
    nodes:
      show: true
      cpu: true
      memory: true
      showLabel: true
    
    # Define the namespaces section properly
    namespaces:
      show: true
      displayedNamespaces:
        - default
        - kube-system
    
    # Define pods, deployments, services sections
    pods:
      show: false
    
    deployments:
      show: false
    
    services:
      show: false
    
    # Resources to monitor
    resources:
      - deployments
      - pods
      - services
  custom.css: ""
  custom.js: ""
---
# --- 3. RBAC rules to allow Homepage to read node/pod status ---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: homepage
rules:
  - apiGroups: [""]
    resources: ["nodes", "namespaces", "pods", "services", "configmaps", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["metrics.k8s.io"]
    resources: ["nodes", "pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets", "statefulsets", "daemonsets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: homepage
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: homepage
subjects:
  - kind: ServiceAccount
    name: homepage
    namespace: default
---
# --- 4. The internal Service to expose the pod ---
apiVersion: v1
kind: Service
metadata:
  name: homepage
  namespace: default
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
  selector:
    app.kubernetes.io/name: homepage
---
# --- 5. The Deployment to run the Homepage application ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: homepage
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: homepage
  template:
    metadata:
      labels:
        app.kubernetes.io/name: homepage
    spec:
      serviceAccountName: homepage
      containers:
        - name: homepage
          image: "ghcr.io/gethomepage/homepage:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          env:
            - name: HOMEPAGE_ALLOWED_HOSTS
              value: "homepage.k8s.local"
            - name: LOG_LEVEL
              value: "debug"
            - name: KUBERNETES_SERVICE_HOST
              value: "kubernetes.default.svc"
            - name: KUBERNETES_SERVICE_PORT
              value: "443"
          volumeMounts:
            - mountPath: /app/config/settings.yaml
              name: config
              subPath: settings.yaml
            - mountPath: /app/config/services.yaml
              name: config
              subPath: services.yaml
            - mountPath: /app/config/widgets.yaml
              name: config
              subPath: widgets.yaml
            - mountPath: /app/config/bookmarks.yaml
              name: config
              subPath: bookmarks.yaml
            - mountPath: /app/config/docker.yaml
              name: config
              subPath: docker.yaml
            - mountPath: /app/config/kubernetes.yaml
              name: config
              subPath: kubernetes.yaml
            - mountPath: /app/config/custom.css
              name: config
              subPath: custom.css
            - mountPath: /app/config/custom.js
              name: config
              subPath: custom.js
        - name: debug
          image: busybox
          command: ['sleep', '3600']
          securityContext:
            runAsUser: 1000
      volumes:
        - name: config
          configMap:
            # This must match the name of our ConfigMap above
            name: homepage-config
---
# --- 6. The Ingress rule to expose Homepage to your network ---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: homepage
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - host: "homepage.k8s.local"
    http:
      paths:
      - path: "/"
        pathType: Prefix
        backend:
          service:
            name: homepage
            port:
              number: 3000
